When the QR detect is /detect/ {
    if {[llength $detect] > 0} {
        set url [lindex $detect 0]
        if {[llength [Statements::findMatches [list /someone/ claims the QR download for $url is /status/]]] > 0} {
            return
        }

        Hold! qr-image [list $this claims the QR download for $url is downloading]
        # HACK: hold needs to be on same process
        When the complete QR download for $url is /imgfile/ {
            Hold! qr-image [list $this claims the QR download for $url is $imgfile]
        }
        # HACK: global id so we can keep spawning processes
        Start process "QR download $url [incr ::qrNextProcessIdx]" {
            Wish $::thisProcess shares statements like \
                [list /someone/ claims the complete QR download for /any/ is /any/]

            set imgfd [file tempfile imgfile imgfile.png]
            exec -ignorestderr wkhtmltoimage --width 640 $url $imgfile
            Claim the complete QR download for $url is $imgfile
            close $imgfd
        }
    }
}

When display /disp/ has width /displayWidth/ height /displayHeight/ {
    When the QR detect is /detect/ {
        Wish to draw text with x 10 y [* $displayHeight 0.3] text [join $detect "\n"] color red scale 2.0 anchor left
    }

    When the QR download for /any/ is /imgfile/ {
        if {$imgfile eq "downloading"} {
            Wish to draw text with x [* $displayWidth 0.75] y [* $displayHeight 0.3] \
                text "Loading..." color red scale 2.0 anchor left

        } else {
            set im [image load $imgfile]
            Wish to draw an image with center [list [* $displayWidth 0.75] [/ $displayHeight 2.0]] \
                image $im radians 0 scale 1
        }
    }
}

set cc [c create]
$cc cflags -I/home/folk/quirc/lib
$cc include "quirc.h"
$cc code {
    struct quirc *qr;
}
::defineImageType $cc
$cc proc qrDetect {Tcl_Interp* interp image_t im} Tcl_Obj* {
    if (qr == NULL) {
        qr = quirc_new();
        FOLK_ENSURE(qr != NULL);
        FOLK_ENSURE(quirc_resize(qr, im.width, im.height) >= 0);
    }

    uint8_t *qrim; int w, h;
    qrim = quirc_begin(qr, &w, &h);
    FOLK_ENSURE(w == im.width);
    FOLK_ENSURE(h == im.height);
    FOLK_ENSURE(1 == im.components);
    for (int y = 0; y < im.height; y++) {
        memcpy(&qrim[y * w], &im.data[y * im.bytesPerRow], w);
    }
    quirc_end(qr);

    Tcl_Obj* ret = Tcl_NewListObj(0, NULL);
    
    int num_codes = quirc_count(qr);
    fprintf(stderr, "Num_codes: %d\n", num_codes);
    for (int i = 0; i < num_codes; i++) {
        struct quirc_code code; 
        struct quirc_data data;
        quirc_decode_error_t err;

        quirc_extract(qr, i, &code);

        /* Decoding stage */
        err = quirc_decode(&code, &data);
        if (err) {
            fprintf(stderr, "DECODE FAILED: %s\n", quirc_strerror(err));
        } else {
            fprintf(stderr, "Data: %s\n", data.payload);

            Tcl_Obj* el = Tcl_NewStringObj((char *)data.payload, -1);
            Tcl_ListObjAppendElement(interp, ret, el);
        }
    }
    return ret;
}
c loadlib "/home/folk/quirc/libquirc.so.1.2"
$cc compile

set ::prevDetects [list]
When the button is pressed & camera /cam/ has frame /f/ at timestamp /any/ {
    set det [qrDetect $f]
    lappend ::prevDetects $det
    if {[llength $::prevDetects] > 15} {
        set ::prevDetects [lassign $::prevDetects oldestDetect]
    }

    if {[llength $det] == 0} {
        # Don't let it clear unless all the last few detects were 0.
        foreach prevDet $::prevDetects {
            if {[llength $prevDet] > 0} {
                return
            }
        }
    }

    Hold! qr [list $this claims the QR detect is $det]
    Hold! qr-image {}
}
