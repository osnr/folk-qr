When the QR detect is /detect/ {
    if {[llength $detect] > 0} {
        set url [lindex $detect 0]
        if {[llength [Statements::findMatches [list /someone/ claims the QR download for $url is /status/]]] > 0} {
            return
        }

        Hold! qr-image [list $this claims the QR download for $url is downloading]
        # HACK: hold needs to be on same process
        When the complete QR download for $url is /imgfile/ {
            Hold! qr-image [list $this claims the QR download for $url is $imgfile]
        }
        # HACK: global id so we can keep spawning processes
        Start process "QR download $url [incr ::qrNextProcessIdx]" {
            Wish $::thisProcess shares statements like \
                [list /someone/ claims the complete QR download for /any/ is /any/]

            set imgfd [file tempfile imgfile imgfile.png]
            exec -ignorestderr wkhtmltoimage --width 640 $url $imgfile
            Claim the complete QR download for $url is $imgfile
            close $imgfd
        }
    }
}

When display /disp/ has width /displayWidth/ height /displayHeight/ {
    When the QR detect is /detect/ {
        Wish to draw text with x 10 y [* $displayHeight 0.3] text [join $detect "\n"] color red scale 2.0 anchor left
    }

    When the QR download for /any/ is /imgfile/ {
        if {$imgfile eq "downloading"} {
            Wish to draw text with x [* $displayWidth 0.75] y [* $displayHeight 0.3] \
                text "Loading..." color red scale 2.0 anchor left

        } else {
            set im [image load $imgfile]
            Wish to draw an image with center [list [* $displayWidth 0.75] [/ $displayHeight 2.0]] \
                image $im radians 0 scale 1
        }
    }
}

set cc [c create]
$cc include <stdlib.h>
$cc include <zbar.h>
$cc code {
    zbar_image_scanner_t *qr;
}
::defineImageType $cc
$cc proc qrDetect {Tcl_Interp* interp image_t im} Tcl_Obj* {
    if (qr == NULL) {
        qr = zbar_image_scanner_create();
        FOLK_ENSURE(qr != NULL);
        zbar_image_scanner_set_config(qr, 0, ZBAR_CFG_ENABLE, 1);
    }

    zbar_image_t *qrim;
    qrim = zbar_image_create();
    zbar_image_set_format(qrim, zbar_fourcc('Y', '8', '0', '0'));
    zbar_image_set_size(qrim, im.width, im.height);

    uint8_t *qrimData = malloc(im.width * im.height);
    for (int y = 0; y < im.height; y++) {
        memcpy(&qrimData[y * im.width], &im.data[y * im.bytesPerRow], im.width);
    }
    zbar_image_set_data(qrim, qrimData, im.width * im.height, zbar_image_free_data);

    Tcl_Obj* ret = Tcl_NewListObj(0, NULL);
    
    int num_codes = zbar_scan_image(qr, qrim);
    fprintf(stderr, "Num_codes: %d\n", num_codes);


    const zbar_symbol_t *symbol = zbar_image_first_symbol(qrim);
    for (; symbol; symbol = zbar_symbol_next(symbol)) {
	/* do something useful with results */
	zbar_symbol_type_t typ = zbar_symbol_get_type(symbol);
	const char *data       = zbar_symbol_get_data(symbol);

	fprintf(stderr, "decoded %s symbol '%s'\n", zbar_get_symbol_name(typ), data);
        Tcl_Obj* el = Tcl_NewStringObj(data, -1);
        Tcl_ListObjAppendElement(interp, ret, el);
    }

    zbar_image_destroy(qrim);
    return ret;
}
c loadlib "/usr/lib/aarch64-linux-gnu/libzbar.so"
$cc compile

set ::prevDetects [list]
When the button is pressed & camera /cam/ has frame /f/ at timestamp /any/ {
    set det [qrDetect $f]
    lappend ::prevDetects $det
    if {[llength $::prevDetects] > 15} {
        set ::prevDetects [lassign $::prevDetects oldestDetect]
    }

    if {[llength $det] == 0} {
        # Don't let it clear unless all the last few detects were 0.
        foreach prevDet $::prevDetects {
            if {[llength $prevDet] > 0} {
                return
            }
        }
    }

    Hold! qr [list $this claims the QR detect is $det]
    Hold! qr-image {}
}
